/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

import org.apache.commons.codec.binary.Base64

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
    }
}

// Be sure to add the plugins {} block at the top of the file.
plugins {
    id "base"
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

allprojects {
    afterEvaluate { project ->
        println "Adding mytest task to $project"
        project.task('mytest') {
            doLast {
                println "Running mytests for $project"
            }
        }
    }
}

// This task uses the "commons-coded" library from the above.
task encode {
    doLast {
        def byte[] encodedString = new Base64().encode('hello world\n'.getBytes())
        println new String(encodedString)
    }
}

// simplest task
task hello {
    doLast {
        println 'Hello world!'
    }
}

// Manipulate existing tasks
hello.doFirst {
    println "Hello Venus"
}

hello.doLast {
    println "Hello Mars"
}

hello.doLast {
    println "Greetings from the $hello.name task"
}

// build scripts are code, very powerful
task upper {
    doLast {
        String someString = 'mY_nAmE'
        println "Original: " + someString
        println "Upper case: " + someString.toUpperCase()
    }
}

// this task depends on the "hello" task
task intro(dependsOn: hello) {
    doLast {
        println "I'm Gradle"
    }
}

// Dynamically create tasks
4.times { counter ->
    task "task$counter" {
        doLast {
            println "I'm task number $counter"
        }
    }
}

// Add dependencies for "task0" after it's defined above.
task0.dependsOn task2, task3

task count {
    doLast {
        4.times { print "$it " }
    }
}

task distribution {
    doLast {
        println "We build the zip with version=$version"
    }
}
task release(dependsOn: 'distribution') {
    doLast {
        println "We release now"
    }
}
// Define a variable by looking at the task graph.
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}

// group can be anything.
task copy(type: Copy, group: "Custom",
        description: "Copies sources to the dest directory") {
    from "src"
    into "dest"
}

// zip file is stored in the "build/distributions" folder.
task zip(type: Zip, group: "Archive",
        description: "Archives sources in a zip file") {
    from "src"
    setArchiveFileName "gradle_sandbox_1.0.zip"
}

// configure a task after creation
task myCopy(type: Copy)
myCopy {
    from 'resources'
    into 'target'
    include('**/*.txt', '**/*.xml', '**/*.properties')
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// This will be used when generating the jar.
version = '0.1.0'

// Add attributes to the "META-INF/MANIFEST.MF" file in the generated jar.
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}
